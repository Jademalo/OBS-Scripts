//By Jademalo, using code from Xaymar
//tex2D has been replaced by image.sample

// Basic Input Parameters
uniform float4x4 ViewProj; // View Projection Matrix
uniform texture2d image; // Input Image

// Custom Parameters (These will be visible in the UI)
uniform int range;


sampler_state primarySampler {
	Filter = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

sampler_state textureSampler {
	AddressU  = Wrap;
	AddressV  = Wrap;
	Filter    = Linear;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertDataOut VSDefault(VertDataIn v_in) {
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;

	return vert_out;
}


// ************************************************************************** //
// Limited <-> Full
// ************************************************************************** //

float4 PS_RangeConvert(VertDataOut v_in) : TARGET {

	const float c_min = 16.0 / 255.0;
	const float c_range = 219.0 / 255.0;
	const float c_inv_range = 1.0 / c_range;

	if(range == 1) {
		float4 c0 = image.Sample(primarySampler, v_in.uv);
		c0.rgb = (c0.rgb - c_min) * c_inv_range;
		return c0;
	}
	if(range == 2) {
		float4 c0 = image.Sample(primarySampler, v_in.uv);
		c0.rgb = (c0.rgb * c_range) + c_min;
		return c0;
	}
	else
		return image.Sample(primarySampler, v_in.uv);
}


technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PS_RangeConvert(v_in);
	}
}
