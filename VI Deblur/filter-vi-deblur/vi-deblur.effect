//By Jademalo, using code from Xaymar
//tex2D has been replaced by image.sample

// Basic Input Parameters
uniform float4x4 ViewProj; // View Projection Matrix
uniform texture2d image; // Input Image

// Custom Parameters
uniform bool offset;
uniform int width;


sampler_state sample_point {
	Filter   = Point;
	AddressU = Wrap;
	AddressV = Wrap;
};

struct VertDataIn {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertDataOut VSDefault(VertDataIn v_in) {
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;

	return vert_out;
}


// ************************************************************************** //
// VI Deblur
// ************************************************************************** //

float4 PS_VIDeblur(VertDataOut v_in) : TARGET {

    float xPixel = (v_in.uv.x * width);

	if(offset == false)
	{
    	if((floor(xPixel) % 2) == 0)											// This fires the first on every odd pixel, and the second on every even.
    	{
        	return image.Sample(sample_point, v_in.uv);
    	}
    	else
    	{
	 		return image.Sample(sample_point, v_in.uv, int2(-1, 0));			// This makes sure that every even is x-1, doubling the odd. (so 2 is 2-1=1)
    	}
	}
	else
	{
		if((floor(xPixel) % 2) == 1)											// This fires the first on every even pixel, and the second on every odd.
		{
			return image.Sample(sample_point, v_in.uv);
		}
		else
		{
			return image.Sample(sample_point, v_in.uv, int2(1, 0));				// This makes sure that every odd is x+1, doubling the even. (so 1 is 1+1=2)
		}
	}
}

// The offset if/else is required since a different combination of the other if statement and the value by int2 is required
// to keep the image on the right plane. Just changing the if means one set of pixels are shifted off the side of the image,
// and just changing the int results in the same but in the opposite manner. This way keeps it 113355 or 224466.

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PS_VIDeblur(v_in);
	}
}
